diff --git a/configure.ac b/configure.ac
index d7c59ed..0d4cee7 100644
--- a/configure.ac
+++ b/configure.ac
@@ -2228,6 +2228,7 @@ hw/kdrive/fake/Makefile
 hw/kdrive/fbdev/Makefile
 hw/kdrive/linux/Makefile
 hw/kdrive/src/Makefile
+hw/kdrive/sdl/Makefile
 test/Makefile
 test/xi2/Makefile
 xserver.ent
diff --git a/dix/main.c b/dix/main.c
index 70dcc94..cae74b6 100644
--- a/dix/main.c
+++ b/dix/main.c
@@ -126,15 +126,29 @@ pthread_cond_t serverRunningCond = PTHREAD_COND_INITIALIZER;
 
 int dix_main(int argc, char *argv[], char *envp[]);
 
+#if defined(__native_client__)
+# include "nacl_main.h"
+#endif
+
 int
 dix_main(int argc, char *argv[], char *envp[])
 #else
 int
+# if defined(__native_client__)
+__attribute__ (( visibility("default") ))
+main(int argc, char *argv[])
+# else
 main(int argc, char *argv[], char *envp[])
+# endif
 #endif
 {
     int i;
     HWEventQueueType alwaysCheckForInput[2];
+#if defined(__native_client__)
+    char **envp = environ;
+    unsetenv("NACL_SPAWN_MODE");
+//    nacl_spawn_setup();
+#endif
 
     display = "0";
 
diff --git a/hw/kdrive/Makefile.am b/hw/kdrive/Makefile.am
index 471ca89..870574d 100644
--- a/hw/kdrive/Makefile.am
+++ b/hw/kdrive/Makefile.am
@@ -15,6 +15,7 @@ LINUX_SUBDIRS = linux
 endif
 
 SERVER_SUBDIRS = 		\
+        sdl                     \
 	$(FBDEV_SUBDIRS)	\
 	$(XEPHYR_SUBDIRS)       \
 	$(XFAKE_SUBDIRS)
@@ -24,7 +25,7 @@ SUBDIRS =			\
 	$(LINUX_SUBDIRS)	\
 	$(SERVER_SUBDIRS)
 
-DIST_SUBDIRS = fbdev ephyr src linux fake
+DIST_SUBDIRS = fbdev ephyr src linux fake sdl
 
 relink:
 	$(AM_V_at)for i in $(SERVER_SUBDIRS) ; do $(MAKE) -C $$i relink || exit 1 ; done
diff --git a/hw/xfree86/os-support/bus/Pci.h b/hw/xfree86/os-support/bus/Pci.h
index 776bb63..ea669ca 100644
--- a/hw/xfree86/os-support/bus/Pci.h
+++ b/hw/xfree86/os-support/bus/Pci.h
@@ -135,7 +135,7 @@
 #define PCI_BUS_NO_DOMAIN(bus) ((bus) & 0xffu)
 #define PCI_TAG_NO_DOMAIN(tag) ((tag) & 0x00ffff00u)
 
-#if defined(linux)
+#if defined(linux) || defined(__native_client__)
 #define osPciInit(x) do {} while (0)
 #elif defined(__FreeBSD__) || defined(__FreeBSD_kernel__) || \
 	defined(__OpenBSD__) || defined(__NetBSD__) || \
diff --git a/os/utils.c b/os/utils.c
index 30592d2..669e3ee 100644
--- a/os/utils.c
+++ b/os/utils.c
@@ -247,6 +247,7 @@ static Bool nolock = FALSE;
 void
 LockServer(void)
 {
+#if !defined(__native_client__)
     char tmp[PATH_MAX], pid_str[12];
     int lfd, i, haslock, l_pid, t;
     const char *tmppath = LOCK_DIR;
@@ -364,6 +365,7 @@ LockServer(void)
     if (!haslock)
         FatalError("Could not create server lock file: %s\n", LockFile);
     StillLocking = FALSE;
+#endif
 }
 
 /*
@@ -1209,9 +1211,25 @@ OsAbort(void)
  * as well.  As it is now, xkbcomp messages don't end up in the log file.
  */
 
+#if defined(__native_client__)
+#include <spawn.h>
+#endif
+
 int
 System(const char *command)
 {
+#if defined(__native_client__)
+  int pid, p;
+  int status;
+
+  const char *args[] = {
+    "bash", "-c", command, NULL,
+  };
+
+  pid = spawnve(P_NOWAIT, "bash", args, NULL);
+  p = waitpid(pid, &status, 0);
+  return p == -1 ? -1 : status;
+#else
     int pid, p;
     void (*csig) (int);
     int status;
@@ -1249,6 +1267,7 @@ System(const char *command)
     }
 
     return p == -1 ? -1 : status;
+#endif
 }
 
 static struct pid {
diff --git a/xkb/ddxLoad.c b/xkb/ddxLoad.c
index cb2dfc3..c2e94f5 100644
--- a/xkb/ddxLoad.c
+++ b/xkb/ddxLoad.c
@@ -179,7 +179,7 @@ XkbDDXCompileKeymapByNames(XkbDescPtr xkb,
     const char *xkbbindir = emptystring;
     const char *xkbbindirsep = emptystring;
 
-#ifdef WIN32
+#if defined(WIN32) || defined(__native_client__)
     /* WIN32 has no popen. The input must be stored in a file which is
        used as input for xkbcomp. xkbcomp does not read from stdin. */
     char tmpname[PATH_MAX];
@@ -192,6 +192,10 @@ XkbDDXCompileKeymapByNames(XkbDescPtr xkb,
 
     OutputDirectory(xkm_output_dir, sizeof(xkm_output_dir));
 
+#if defined(__native_client__)
+    strcpy(tmpname, "/tmp");
+    strcat(tmpname, "/xkb_XXXXXX");
+#endif
 #ifdef WIN32
     strcpy(tmpname, Win32TempDir());
     strcat(tmpname, "\\xkb_XXXXXX");
@@ -233,7 +237,7 @@ XkbDDXCompileKeymapByNames(XkbDescPtr xkb,
         return FALSE;
     }
 
-#ifndef WIN32
+#if !defined(WIN32) && !defined(__native_client__)
     out = Popen(buf, "w");
 #else
     out = fopen(tmpname, "w");
@@ -247,7 +251,7 @@ XkbDDXCompileKeymapByNames(XkbDescPtr xkb,
         }
 #endif
         XkbWriteXKBKeymapForNames(out, names, xkb, want, need);
-#ifndef WIN32
+#if !defined(WIN32) && !defined(__native_client__)
         if (Pclose(out) == 0)
 #else
         if (fclose(out) == 0 && System(buf) >= 0)
@@ -259,20 +263,20 @@ XkbDDXCompileKeymapByNames(XkbDescPtr xkb,
                 strlcpy(nameRtrn, keymap, nameRtrnLen);
             }
             free(buf);
-#ifdef WIN32
+#if defined(WIN32) || defined(__native_client__)
             unlink(tmpname);
 #endif
             return TRUE;
         }
         else
             LogMessage(X_ERROR, "Error compiling keymap (%s)\n", keymap);
-#ifdef WIN32
+#if defined(WIN32) || defined(__native_client__)
         /* remove the temporary file */
         unlink(tmpname);
 #endif
     }
     else {
-#ifndef WIN32
+#if !defined(WIN32) && !defined(__native_client__)
         LogMessage(X_ERROR, "XKB: Could not invoke xkbcomp\n");
 #else
         LogMessage(X_ERROR, "Could not open file %s\n", tmpname);
