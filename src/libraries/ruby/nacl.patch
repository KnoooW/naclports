diff --git a/configure b/configure
index a3a1c51..1e3e2ca 100755
--- a/configure
+++ b/configure
@@ -3160,11 +3160,13 @@ esac
 fi
 
 
-  case "$build_cpu" in #(
+  case "$target_cpu" in #(
   x86_64|i?86) :
     nacl_cv_cpu_nick=x86 ;; #(
+  le32) :
+    nacl_cv_cpu_nick=pnacl ;; #(
   *) :
-    nacl_cv_cpu_nick=$build_cpu ;;
+    nacl_cv_cpu_nick=$target_cpu ;;
 esac
   case "$build_os" in #(
   linux*) :
@@ -3185,6 +3187,9 @@ $as_echo_n "checking NativeClient toolchain... " >&6; }
   if test -d \
     "${NACL_SDK_ROOT}/toolchain/${nacl_cv_os_nick}_${nacl_cv_cpu_nick}_${nacl_cv_build_variant}"; then
     NACL_TOOLCHAIN="${nacl_cv_os_nick}_${nacl_cv_cpu_nick}_${nacl_cv_build_variant}"
+  elif test -d \
+    "${NACL_SDK_ROOT}/toolchain/${nacl_cv_os_nick}_x86_${nacl_cv_cpu_nick}/${nacl_cv_build_variant}"; then
+    NACL_TOOLCHAIN="${nacl_cv_os_nick}_x86_${nacl_cv_cpu_nick}/${nacl_cv_build_variant}"
   else
     case "${nacl_cv_build_variant}" in #(
   glibc) :
diff --git a/.gitignore b/.gitignore
index 5bcaeeb..abeccf1 100644
--- a/.gitignore
+++ b/.gitignore
@@ -50,7 +50,6 @@ y.tab.c
 /config.h.in
 /config.status
 /config.status.lineno
-/configure
 /doc/capi
 /enc.mk
 /encdb.h
diff --git a/configure.in b/configure.in
index 7977aaf..e86b7f6 100644
--- a/configure.in
+++ b/configure.in
@@ -90,8 +90,11 @@ AC_DEFUN([RUBY_NACL],
                        [no], [nacl_cv_build_variant=glibc],
                        [yes], [nacl_cv_build_variant=newlib])])
 
-  AS_CASE(["$build_cpu"],
-          [x86_64|i?86], [nacl_cv_cpu_nick=x86], [nacl_cv_cpu_nick=$build_cpu])
+  AS_CASE(["$target_cpu"],
+          [x86_64|i?86], [nacl_cv_cpu_nick=x86],
+          [le32], [nacl_cv_cpu_nick=pnacl
+                   ac_cv_exeext=.pexe],
+          [nacl_cv_cpu_nick=$target_cpu])
   AS_CASE(["$build_os"],
           [linux*], [nacl_cv_os_nick=linux],
           [darwin*], [nacl_cv_os_nick=mac],
@@ -105,6 +108,9 @@ AC_DEFUN([RUBY_NACL],
   if test -d \
     "${NACL_SDK_ROOT}/toolchain/${nacl_cv_os_nick}_${nacl_cv_cpu_nick}_${nacl_cv_build_variant}"; then
     NACL_TOOLCHAIN="${nacl_cv_os_nick}_${nacl_cv_cpu_nick}_${nacl_cv_build_variant}"
+  elif test -d \
+    "${NACL_SDK_ROOT}/toolchain/${nacl_cv_os_nick}_x86_${nacl_cv_cpu_nick}/${nacl_cv_build_variant}"; then
+    NACL_TOOLCHAIN="${nacl_cv_os_nick}_x86_${nacl_cv_cpu_nick}/${nacl_cv_build_variant}"
   else
     AS_CASE(
       ["${nacl_cv_build_variant}"],
diff --git a/dln.c b/dln.c
index 9eb659c..4d9458e 100644
--- a/dln.c
+++ b/dln.c
@@ -1318,28 +1318,13 @@ dln_load(const char *file)
 # define RTLD_GLOBAL 0
 #endif
 
-#ifdef __native_client__
-	char* p, *orig;
-        if (file[0] == '.' && file[1] == '/') file+=2;
-	orig = strdup(file);
-	for (p = file; *p; ++p) {
-	    if (*p == '/') *p = '_';
-	}
-#endif
 	/* Load file */
 	if ((handle = (void*)dlopen(file, RTLD_LAZY|RTLD_GLOBAL)) == NULL) {
-#ifdef __native_client__
-            free(orig);
-#endif
 	    error = dln_strerror();
 	    goto failed;
 	}
 
 	init_fct = (void(*)())(VALUE)dlsym(handle, buf);
-#ifdef __native_client__
-	strcpy(file, orig);
-	free(orig);
-#endif
 #if defined __SYMBIAN32__
 	if (init_fct == NULL) {
 	    init_fct = (void(*)())dlsym(handle, "1"); /* Some Symbian versions do not support symbol table in DLL, ordinal numbers only */
diff --git a/ext/extmk.rb b/ext/extmk.rb
index 4e5f64d..566f1d1 100755
--- a/ext/extmk.rb
+++ b/ext/extmk.rb
@@ -407,6 +407,12 @@ unless $message
 end
 
 EXEEXT = CONFIG['EXEEXT']
+
+# Without this ext/ripper will try to use the default miniruby rather
+# than honoring the MINIRUBY set in the envrionment.
+# TODO(sbc): Figure out why this is needed and remove.
+CROSS_COMPILING = 'yes'
+
 if CROSS_COMPILING
   $ruby = $mflags.defined?("MINIRUBY") || CONFIG['MINIRUBY']
 elsif sep = config_string('BUILD_FILE_SEPARATOR')
diff --git a/file.c b/file.c
index f0f8348..95faa09 100644
--- a/file.c
+++ b/file.c
@@ -1074,6 +1074,14 @@ rb_group_member(GETGROUPS_T gid)
 #define USE_GETEUID 1
 #endif
 
+#ifdef __native_client__
+// Although the NaCl toolchain contain eaccess() is it not yet
+// overridden by nacl_io.
+// TODO(sbc): Remove this once eaccess() is wired up correctly
+// in NaCl.
+#define eaccess access
+#endif
+
 #ifndef HAVE_EACCESS
 int
 eaccess(const char *path, int mode)
@@ -5254,7 +5262,7 @@ rb_path_check(const char *path)
 
 #ifndef _WIN32
 #ifdef __native_client__
-__attribute__((noinline))
+__attribute__((noinline,weak))
 #endif
 int
 rb_file_load_ok(const char *path)
diff --git a/io.c b/io.c
index aa514e3..fbb1607 100644
--- a/io.c
+++ b/io.c
@@ -52,9 +52,6 @@
 #if defined(HAVE_SYS_IOCTL_H) && !defined(_WIN32)
 #include <sys/ioctl.h>
 #endif
-#if defined(__native_client__) && defined(NACL_NEWLIB)
-# include "nacl/ioctl.h"
-#endif
 #if defined(HAVE_FCNTL_H) || defined(_WIN32)
 #include <fcntl.h>
 #elif defined(HAVE_SYS_FCNTL_H)
diff --git a/nacl/GNUmakefile.in b/nacl/GNUmakefile.in
index c1aaa36..e430100 100644
--- a/nacl/GNUmakefile.in
+++ b/nacl/GNUmakefile.in
@@ -4,48 +4,62 @@
 include Makefile
 -include uncommon.mk
 
+# Remove the default -D_FORTIFY_SOURCE=2 from CFLAGS. Without this
+# NaCl's glibc build generates undefined references to __memset_chk.
+# TODO(sbc): Remove this once NaCl's glibc is fixed.
+XCFLAGS := $(filter-out -D_FORTIFY_SOURCE=2,$(XCFLAGS))
+
 NACL_SDK_ROOT=@NACL_SDK_ROOT@
 NACL_TOOLCHAIN=@NACL_TOOLCHAIN@
 NACL_TOOLCHAIN_DIR=$(NACL_SDK_ROOT)/toolchain/$(NACL_TOOLCHAIN)
+
+# Don't override CC/LD/etc if they are already set to absolute
+# paths (this is the case when building in the naclports tree).
+ifeq ($(dir $(CC)),./)
 CC:=$(NACL_TOOLCHAIN_DIR)/bin/$(CC)
+endif
+ifeq ($(dir $(LD)),./)
 LD:=$(NACL_TOOLCHAIN_DIR)/bin/$(LD)
+endif
+ifeq ($(dir $(NM)),./)
 NM:=$(NACL_TOOLCHAIN_DIR)/bin/$(NM)
+endif
+ifeq ($(dir $(AR)),./)
 AR:=$(NACL_TOOLCHAIN_DIR)/bin/$(AR)
+endif
+ifeq ($(dir $(AS)),./)
 AS:=$(NACL_TOOLCHAIN_DIR)/bin/$(AS)
+endif
+ifeq ($(dir $(RANLIB)),./)
 RANLIB:=$(NACL_TOOLCHAIN_DIR)/bin/$(RANLIB)
+endif
+ifeq ($(dir $(OBJDUMP)),./)
 OBJDUMP:=$(NACL_TOOLCHAIN_DIR)/bin/$(OBJDUMP)
+endif
+ifeq ($(dir $(OBJCOPY)),./)
 OBJCOPY:=$(NACL_TOOLCHAIN_DIR)/bin/$(OBJCOPY)
+endif
 PYTHON=@PYTHON@
 
 PPROGRAM=pepper-$(PROGRAM)
 PEPPER_LIBS=-lppapi
-PROGRAM_NMF=$(PROGRAM:.nexe=.nmf)
-PPROGRAM_NMF=$(PPROGRAM:.nexe=.nmf)
+PROGRAM_NMF=$(PROGRAM:$(EXEEXT)=.nmf)
+PPROGRAM_NMF=$(PPROGRAM:$(EXEEXT)=.nmf)
 
 GNUmakefile: $(srcdir)/nacl/GNUmakefile.in
 $(PPROGRAM): $(PROGRAM) pepper_main.$(OBJEXT)
 	$(Q)$(MAKE) $(MFLAGS) PROGRAM=$(PPROGRAM) MAINOBJ="pepper_main.$(OBJEXT)" LIBS="$(LIBS) $(PEPPER_LIBS)" program
-$(PROGRAM_NMF) $(PPROGRAM_NMF): $(@:.nmf=.nexe) nacl/create_nmf.rb
+$(PROGRAM_NMF) $(PPROGRAM_NMF): $(@:.nmf=$(EXEEXT)) nacl/create_nmf.rb
 
 .PHONY: pprogram package show_naclflags
-.SUFFIXES: .nexe .nmf
-.nexe.nmf:
+.SUFFIXES: $(EXEEXT) .nmf
+$(EXEEXT).nmf:
 	$(ECHO) generating manifest $@
-	$(Q)$(MINIRUBY) $(srcdir)/nacl/create_nmf.rb --verbose=$(V) $(@:.nmf=.nexe) $@
+	$(Q)$(MINIRUBY) $(srcdir)/nacl/create_nmf.rb --verbose=$(V) $(@:.nmf=$(EXEEXT)) $@
 
 pepper_main.$(OBJEXT): $(srcdir)/nacl/pepper_main.c
 	@$(ECHO) compiling nacl/pepper_main.c
 	$(Q) $(CC) $(CFLAGS) $(XCFLAGS) $(CPPFLAGS) $(COUTFLAG)$@ -c $(srcdir)/nacl/pepper_main.c
-ruby.$(OBJEXT):
-	@$(ECHO) compiling $<
-	$(Q) $(CC) $(CFLAGS) $(XCFLAGS) $(CPPFLAGS) $(COUTFLAG)$@.tmp -c $<
-	$(Q) $(OBJCOPY) --weaken-symbol=rb_load_file $@.tmp $@
-	@-$(RM) $@.tmp
-file.$(OBJEXT):
-	@$(ECHO) compiling $<
-	$(Q) $(CC) $(CFLAGS) $(XCFLAGS) $(CPPFLAGS) $(COUTFLAG)$@.tmp -c $<
-	$(Q) $(OBJCOPY) --weaken-symbol=rb_file_load_ok $@.tmp $@
-	@-$(RM) $@.tmp
 
 .rbconfig.time:
 	@$(MAKE) .rbconfig.raw.time RBCONFIG=.rbconfig.raw.time
diff --git a/nacl/nacl-config.rb b/nacl/nacl-config.rb
index b90c9ed..0747225 100644
--- a/nacl/nacl-config.rb
+++ b/nacl/nacl-config.rb
@@ -27,14 +27,17 @@ module NaClConfig
   INSTALL_PROGRAM = config['INSTALL_PROGRAM']
   INSTALL_LIBRARY = config['INSTALL_DATA']
 
-  SEL_LDR = [
-    File.join(SDK_ROOT, 'toolchain', config['NACL_TOOLCHAIN'], 'bin', "sel_ldr_#{cpu_nick}"),
-    File.join(SDK_ROOT, 'tools', "sel_ldr_#{cpu_nick}")
-  ].find{|path| File.executable?(path)} or raise "No sel_ldr found"
-  IRT_CORE = [
-    File.join(SDK_ROOT, 'toolchain', config['NACL_TOOLCHAIN'], 'bin', "irt_core_#{cpu_nick}.nexe"),
-    File.join(SDK_ROOT, 'tools', "irt_core_#{cpu_nick}.nexe")
-  ].find{|path| File.executable?(path)} or raise "No irt_core found"
+  if cpu_nick == 'x86_64' or cpu_nick == 'x86_32'
+    SEL_LDR = [
+      File.join(SDK_ROOT, 'toolchain', config['NACL_TOOLCHAIN'], 'bin', "sel_ldr_#{cpu_nick}"),
+      File.join(SDK_ROOT, 'tools', "sel_ldr_#{cpu_nick}")
+    ].find{|path| File.executable?(path)} or raise "No sel_ldr found"
+    IRT_CORE = [
+      File.join(SDK_ROOT, 'toolchain', config['NACL_TOOLCHAIN'], 'bin', "irt_core_#{cpu_nick}.nexe"),
+      File.join(SDK_ROOT, 'tools', "irt_core_#{cpu_nick}.nexe")
+    ].find{|path| File.executable?(path)} or raise "No irt_core found"
+  end
+
   RUNNABLE_LD = File.join(HOST_LIB, 'runnable-ld.so')
 
   module_function
diff --git a/nacl/pepper_main.c b/nacl/pepper_main.c
index c0e497b..6c41929 100644
--- a/nacl/pepper_main.c
+++ b/nacl/pepper_main.c
@@ -210,7 +210,7 @@ pruby_async_return_value(void* data, VALUE value)
 static struct PP_Var
 pruby_cstr_to_var(const char* str)
 {
-#ifdef PPB_VAR_INTERFACE_1_0
+#ifndef PPB_VAR_INTERFACE_1_1
   if (var_interface != NULL)
     return var_interface->VarFromUtf8(module_id, str, strlen(str));
   return PP_MakeUndefined();
@@ -252,7 +252,7 @@ pruby_str_to_var(volatile VALUE str)
     fprintf(stderr, "[BUG] Unexpected object type: %x\n", TYPE(str));
     exit(EXIT_FAILURE);
   }
-#ifdef PPB_VAR_INTERFACE_1_0
+#ifndef PPB_VAR_INTERFACE_1_1
   if (var_interface != NULL) {
     return var_interface->VarFromUtf8(module_id, RSTRING_PTR(str), RSTRING_LEN(str));
   }
@@ -517,7 +517,7 @@ static void Instance_DidDestroy(PP_Instance instance) {
  *     the top left of the plugin's coordinate system (not the page).  If the
  *     plugin is invisible, @a clip will be (0, 0, 0, 0).
  */
-#ifdef PPP_INSTANCE_INTERFACE_1_0
+#ifndef PPP_INSTANCE_INTERFACE_1_1
 static void
 Instance_DidChangeView(PP_Instance instance,
                        const struct PP_Rect* position,
diff --git a/ruby.c b/ruby.c
index 6634229..f99d7fa 100644
--- a/ruby.c
+++ b/ruby.c
@@ -1747,6 +1747,9 @@ load_file(VALUE parser, VALUE fname, int script, struct cmdline_options *opt)
     return (NODE *)rb_ensure(load_file_internal, (VALUE)&arg, restore_lineno, rb_gv_get("$."));
 }
 
+#ifdef __native_client__
+__attribute__((weak))
+#endif
 void *
 rb_load_file(const char *fname)
 {
