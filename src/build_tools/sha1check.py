#!/usr/bin/python
# Copyright (c) 2012 The Native Client Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
#

import hashlib
import string
import sys

# usage:
#   python sha1check.py <hashfile
#
# where hashfile was generated by "sha1sum.py" (or the "sha1sum" utility)
# and has the format:
#
#  da39a3ee5e6b4b0d3255bfef95601890afd80709 *filename
#
# sha1check.py will perform sha1 hash on filename (opened in
# binary mode) and compare the generated hash value with
# the hash value in the input hashfile.  If the two hashes
# don't match or filename doesn't exist, sha1check.py will
# return an error.

def ErrorOut(msg):
  sys.stdout.write('sha1check.py: %s\n' % msg)
  sys.exit(1)


count = 0
for s in sys.stdin:
  count += 1
  # split the hash *filename into a pair
  sha1sum, name = s.split()

  print "Filename: ",  name
  print "Expected hash: ", sha1sum
  # make sure filename started with '*' (binary mode)
  if name.find('*') == 0:
    # remove leading '*' and any newlines from filename
    filename = name[1:]
    try:
      # open file in binary mode & sha1 hash it
      f = open(filename, "rb")
      h = hashlib.sha1()
      h.update(f.read())
      filehash = h.hexdigest()
      f.close()
      # verify the generated hash and embedded hash match
      if sha1sum.lower() != filehash.lower():
        print "Actual hash: ", filehash
        ErrorOut("sha1 checksum failed on file: " + filename)
      print "sha1check1.py: "+ filename + " verified"
    except IOError:
      ErrorOut("unable to open file " + filename)
    except:
      ErrorOut("encountered an unexpected error")
  else:
    ErrorOut("input hash is not from a binary file")

if not count:
  ErrorOut("No file hashes given on input")

# all files hashed with success
sys.exit(0)
